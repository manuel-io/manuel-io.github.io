<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[A personal Blog]]></title>
  <link href="https://manuel-io.github.io/atom.xml" rel="self"/>
  <link href="https://manuel-io.github.io/"/>
  <updated>2020-03-29T23:21:36+02:00</updated>
  <id>https://manuel-io.github.io/</id>
  <author>
    <name><![CDATA[Manuel]]></name>
    <email><![CDATA[m.a.n.u.e.l@posteo.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  
  <entry>
    <title type="html"><![CDATA[Query MiniDLNA to list media files]]></title>
    <link href="https://manuel-io.github.io/blog/2020/03/29/query-minidlna-to-list-media-files/"/>
    <updated>2020-03-29T22:44:46+02:00</updated>
    <id>https://manuel-io.github.io/blog/2020/03/29/query-minidlna-to-list-media-files</id>
    <content type="html"><![CDATA[<p>Eine kleine Fingerübung um einen MiniDLNA Server im lokalen Netzt abzufragen.
<a href="https://electroblock.wordpress.com/2016/02/14/upnp-dlna-analyse-per-cmdline-mit-curl/">Hier macht</a>
das jemand einfach mit <code>curl</code>. Ist lehrreich.</p>

<pre><code>#!/usr/bin/python3
# -*- coding: utf-8 -*-

import requests
from xml.dom.minidom import parseString

minidlna = 'http://192.168.178.42:8200'
headers = { 'Content-Type': 'text/xml; charset=utf-8'
          , 'SOAPACTION': 'urn:schemas-upnp-org:service:ContentDirectory:1#Browse'
          }

def get_object_id(index):
    return '''
      &lt;?xml version="1.0" encoding="utf-8"?&gt;
        &lt;s:Envelope xmlns:ns0="urn:schemas-upnp-org:service:ContentDirectory:1" xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
          &lt;s:Body&gt;
            &lt;ns0:Browse&gt;
              &lt;ObjectID&gt;%s&lt;/ObjectID&gt;
              &lt;BrowseFlag&gt;BrowseDirectChildren&lt;/BrowseFlag&gt;
              &lt;Filter&gt;*&lt;/Filter&gt;
            &lt;/ns0:Browse&gt;
          &lt;/s:Body&gt;
        &lt;/s:Envelope&gt;
      &lt;/xml&gt;
    ''' % index

def parse_service(service):
    name = service.getElementsByTagName('serviceType')[0].firstChild.nodeValue
    url = service.getElementsByTagName('controlURL')[0].firstChild.nodeValue
    return { 'name': name
           , 'url': url
           }

def parse_container(container):
    index = container.getAttribute('id')
    title = container.getElementsByTagName('dc:title')[0].firstChild.nodeValue
    return { 'index': index
           , 'title': title
           }

def parse_item(item):
    index = item.getAttribute('id')
    title = item.getElementsByTagName('dc:title')[0].firstChild.nodeValue
    result = item.getElementsByTagName('res')[0]
    return { 'index': index
           , 'title': title
           , 'size': result.getAttribute('size')
           , 'duration': result.getAttribute('duration')
           , 'bitrate': result.getAttribute('bitrate')
           , 'sampling': result.getAttribute('sampleFrequency')
           , 'channels': result.getAttribute('nrAudioChannels')
           , 'resolution': result.getAttribute('resolution')
           , 'url': result.firstChild.nodeValue
           }

result = requests.get('%s%s' % (minidlna, '/rootDesc.xml'))
root = parseString(result.content)

services = list(map(lambda service: parse_service(service), root.getElementsByTagName('service')))
content = [ service for service in services if service['name'] == 'urn:schemas-upnp-org:service:ContentDirectory:1' ][0]
request = '%s%s' % (minidlna, content['url'])

result = requests.post(request, data=get_object_id('0'), headers=headers);
root = parseString(result.content)
body = parseString(root.getElementsByTagName('Result')[0].firstChild.nodeValue)

containers = list(map(lambda container: parse_container(container), body.getElementsByTagName('container')))
for container in containers:
    # print(container['index'], container['title'])

    result = requests.post(request, data=get_object_id(container['index']), headers=headers);
    root = parseString(result.content)
    body = parseString(root.getElementsByTagName('Result')[0].firstChild.nodeValue)
    # pretty = body.toprettyxml()
    # print(pretty)

    folders = list(map(lambda container: parse_container(container), body.getElementsByTagName('container')))
    for folder in folders:
        # print(folder['index'], folder['title'])

        result = requests.post(request, data=get_object_id(folder['index']), headers=headers);
        root = parseString(result.content)
        body = parseString(root.getElementsByTagName('Result')[0].firstChild.nodeValue)
        # pretty = body.toprettyxml()
        # print(pretty)

        items = list(map(lambda item: parse_item(item), body.getElementsByTagName('item')))
        for item in items:
            print('Index', item['index'])
            print('Title', item['title'])
            print('Size', item['size'])
            print('Duration', item['duration'])
            print('Bitrate', item['bitrate'])
            print('Sampling', item['sampling'])
            print('Channels', item['channels'])
            print('Resolution', item['resolution'])
            print('Url', item['url'])
            print('----')

        print('----')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laugenbrezeln]]></title>
    <link href="https://manuel-io.github.io/blog/2020/02/21/laugenbrezeln/"/>
    <updated>2020-02-21T19:33:37+01:00</updated>
    <id>https://manuel-io.github.io/blog/2020/02/21/laugenbrezeln</id>
    <content type="html"><![CDATA[<p>Nach einigen Misserfolgen in der Vergangenheit habe ich mich wieder mit der
Zubereitung von Laugengebäck auseinandergesetzt und nach etwas Recherche ganz
akzeptable Ergebnisse erzielt. Grundlegend waren hier zwei Youtube-Vidoes an
denen ich mich orientiert habe. Einmal die rustikale Version „<a href="https://youtu.be/EVzlCEmUswE">Brezeln machen mit
dem Profi</a>“ und die schwäbische, fett-reiche Variante von „<a href="https://youtu.be/M4oCx-JRFgE">Häussler Backdorf</a>“.</p>

<h4>Zutaten:</h4>

<pre><code>500g Weizenmehl Typ 550 oder Dinkelmehl Typ 630
21g frische Hefe
300g eiskaltes Wasser
1TL Zucker
1TL Salz
15g Magarine (flüssig, abgekühlt)
10g Natron auf 200ml Wasser
2EL Mehrsalz (grobkörnig)
</code></pre>

<img class="left" src="https://manuel-io.github.io/data/images/pretzels.jpg" width="320" title="Laugenbrezeln" alt="Laugenbrezeln">


<h4>Zubereitung:</h4>

<p>Zunächst Mehl und Salz in einer Schüssel verrühren. Die Hefe mit Zucker in
eiskaltem Wasser auflösen. Kaltes Wasser ist nicht unbedingt typisch für einen
Heftteig. In dem Fall ist es aber wichtig dass die Hefe erst im warmen Ofen
aktiv wird. Dann die Flüssigkeit zum Mehl geben und mit der geschmolzenen,
abgekühlten Margarine verkneten. Der Teig ist etwas klebrig deshalb bietet es
sich hier an eine Küchenmaschine zu benutzen. Es geht aber auch mit bemehlten
Händen. In der Küchenmaschine reichen schon etwa 5 Minuten Knetzeit. Mit der
Hand sind es 10-12 Minuten.</p>

<p>Dann den Teig in vier gleichgroße Kugeln mit einer glatten Oberfläche teilen.
Die Kugeln jeweils zu einem länglichen Strang von 80-100cm ausrollen und in die
Form einer Brezel bringen und mit der Oberseite nach Unten auf einem Backblech
platzieren.</p>

<p>Den Ofen jetzt auf 230° C vorheizen. Nach etwas Ruhezeit können die Brezeln mit
heißer Natronlauge bestrichen werden. Dazu Wasser aufkochen, mit Natron
verrühren (gewöhnliches Speisenatron) und die Rohlinge großzügig einstreichen.
Noch Wenden und die Oberseite ebenfalls einstreichen.</p>

<p>Mit groben Meersalz bestreuen. Gut machen sich auch Kürbiskerne auf der
Oberfläche.</p>

<p>Die Brezeln für ca. 20 Minuten in den heiße Ofen schieben. Nach
Hälfte der Backzeit nochmal die Oberfläche mit Natronlauge einstreichen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent Work (End 2019)]]></title>
    <link href="https://manuel-io.github.io/blog/2020/02/01/recent-work-end-2019/"/>
    <updated>2020-02-01T10:00:59+01:00</updated>
    <id>https://manuel-io.github.io/blog/2020/02/01/recent-work-end-2019</id>
    <content type="html"><![CDATA[<h3>Selfmade Modem</h3>

<img class="left" src="https://manuel-io.github.io/data/images/usb-lte-modem.jpg" width="300" title="DIY USB-LTE Modem" alt="DIY USB-LTE Modem">


<p>Due to the lack of internet and phone connectivity it is not easy to document
my work on this blog. The only mitigation is using a mobile connection. And no,
phone calls with the provider are not really helpful. Every conversation
begins with the same conclusion. The router does not synchronize. No progress
since 27 November.</p>

<p>To provide upstream connectivity to the local network I decided to connect a
usb-lte stick to an odroid device which in turn is connected to the upstream
socket of an old wifi router device.</p>

<p>This way each terminal device in the local net even if wired or wireless has
connection to the global net.</p>

<h3>Simulating Traffic</h3>

<p>Another project is the simulation of street traffic on a canvas map. This
project has been in the queue for a long time. Because it is very time
consuming and needs some calculations I can hardly say when I can write more
about it. The good news is I had a little time to get back in here over the
holidays</p>

<p>Maybe I will publish some source code at some day, but it is still very
experimental.</p>

<img class="center" src="https://manuel-io.github.io/data/images/traffic-map.gif" width="800" title="Simulating Traffic" alt="Simulating Traffic">


<h3>36C3 - Resource Exhaustion</h3>

<p>At the end of 2019 the 36C3 congress took place in East Germany and has many
good presentations <a href="https://media.ccc.de/c/36c3">online on its website</a>. Even the performance on stage
has improved over the last years.</p>

<p>In Germany most popular are the talks <a href="https://media.ccc.de/v/36c3-10652-bahnmining_-_punktlichkeit_ist_eine_zier">BahnMining - Pünktlichkeit ist eine
Zier</a> and <a href="https://media.ccc.de/v/36c3-11175-hirne_hacken">Hirne Hacken</a>. Both deal with a
physiological influence of our society. Depending on the level of interest
there are a lot of other talks with more techniqual aspects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask: Progressive Download &amp; Large Objects]]></title>
    <link href="https://manuel-io.github.io/blog/2019/10/26/flask-progressive-download-and-large-objects/"/>
    <updated>2019-10-26T21:57:41+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/10/26/flask-progressive-download-and-large-objects</id>
    <content type="html"><![CDATA[<p>Often a progressive download is described as a stream but when it comes to the technical side it is important to distinguish. And we are talking about python&rsquo;s flask framework so we are talking about the capabilities of HTTP too. The feature of HTTP for using progressive download is the HTTP range request. And because it is rarely documented how to enable this feature in flask. I decided to write an article about my experiences.</p>

<p>During the implementation it is good to have the  appropriate RFC document at hand (<a href="https://tools.ietf.org/html/rfc7233">RFC7233</a>).</p>

<p>As far as I can say you can use the build in <a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.send_from_directory">function</a> <code>send_from_directory</code> which supports the feature.
Let&rsquo;s try it in a curl session, requesting a server which supports HTTP range:</p>

<pre><code>curl -vI -r 10-20  http://localhost:5000/files/download/e8cca36cbc06f670
</code></pre>

<p>Asking the server for a certain Range <code>Range: bytes=10-20</code> and receiving a valid answer:</p>

<pre><code>HTTP/1.0 206 PARTIAL CONTENT
Content-Type: image/jpeg
Accept-Ranges: bytes
Content-Range: bytes 10-20/2870224
Content-Length: 11
</code></pre>

<p>The server supports bytes and is returning <code>11 bytes</code> of a file with <code>2870224 bytes</code> in total. This is a nice feature but how about files that do not lie in the file system. I often store files in a database. This is when you have to implement the whole procedure by yourself. But it&rsquo;s still possible and thanks to the <a href="https://www.postgresql.org/docs/10/largeobjects.html">large objects</a> feature of PostgreSQL you can fetch for a certain range of bytes from a file stored in the database.</p>

<p>I&rsquo;m using this technique in a newer development version of the minicloud project. Check out my example on the <a href="https://github.com/manuel-io/minicloud/blob/f00d9c3136954929d193fbb74a683f8dea773d0c/files.py#L243-L289">Github page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiking to the climate summit]]></title>
    <link href="https://manuel-io.github.io/blog/2019/08/17/hitchhiker-to-the-climate-summit/"/>
    <updated>2019-08-17T13:22:59+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/08/17/hitchhiker-to-the-climate-summit</id>
    <content type="html"><![CDATA[<img class="center" src="https://manuel-io.github.io/data/images/malizia2.png" title="Malizia II" alt="Malizia II">


<p>Follow Team Malizia and Greta Thunberg sailing to New York. This Tracker shows
you the live position: <a href="https://tracker.borisherrmannracing.com/">https://tracker.borisherrmannracing.com/</a>.</p>

<p>Good luck. Also enjoy the journey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Burger Time]]></title>
    <link href="https://manuel-io.github.io/blog/2019/06/18/burger-time/"/>
    <updated>2019-06-18T08:59:41+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/06/18/burger-time</id>
    <content type="html"><![CDATA[<img class="left 320" src="https://manuel-io.github.io/data/images/burgertime.jpg" title="Burger Time" alt="Burger Time">


<p>Und da sind sie nun… die drei äh vier oder mehr veganen Burger. Nachdem sich die Menschheit tausende Jahre Zeit genommen hat den Geschmack tierischen Fleisches ausgiebig zu ergründen, ist man sich nun einig geworden wie es denn schmecken soll. Und dieser Geschmack kann dann auch noch durch pflanzliche Zutaten reproduziert werden. Es würde jetzt noch der nächste Schritt fehlen. Den Menschen zu erklären welche Qualen und Grausamkeiten sich in dieser Zeit abgespielt haben und leider weiterhin abspielt.</p>

<p>Aber es sind halt merkwürdige Zeiten in denen das Containern von abgelaufenen Lebensmitteln aus wirtschaftlichen Interessen verboten ist, aber Küken aus wirtschaftlichen Interessen weiterhin geschreddert werden dürfen.</p>

<p>Da ist es doch erfreulich wenn zwischendurch ein veganer Burger-Hype einsetzt bei dem alle Großen mitspielen.
Und ich möchte auch meinen Senf dazu geben. Bezahlt werde ich nicht, aber sollte es da jemanden geben, bitte melden.</p>

<p>Natürlich kann ich nur über die Burger schreiben, die auch bei mir angekommen sind. Unter den Punkten: Geschmack, Gesundheit, Umwelt und Ethik bewerte ich den Incredible Burger, den Beyond Burger und den Mühlen Burger.</p>

<h3>Geschmack</h3>

<p>Und da falle ich auch schon durch. Als klassischer Bohnenburger-Veganer ist für mich meine Vergleichsgrundlage ein Kidneybohnen-Burger. Alle drei Burger wurden aber mit dem Ziel entwickelt ihrem tierischen Pendant im Geschmack ebenbürtig zu sein.</p>

<p>Beim Incredible Burger viel mir zunächst der starke Geruch auf: „Richt wie Katzenfutter“. Und das ist gar nicht so abwertend gemeint wie es klingt. Ich habe einfach eine mir naheliegende Vergleichsmöglichkeit genommen. Mein Kater ist wirklich sehr anspruchsvoll. Versprochen!</p>

<p>Ich kann nur sagen alle drei Produkte erfüllen ihren Job. Meine geschmackliche Präferenz liegt beim Mühlen und Beyond Burger. Ein Ranking hat die <a href="https://vegan-taste-week.de/vegane-burger-vergleich">Albert Schweitzer Stiftung</a>.</p>

<h3>Gesundheit</h3>

<p>Eigentlich wollte ich über mein <a href="https://vkitchen.herokuapp.com/recipes/163/embedded?locale=de&amp;published=false">Linsen-Chili</a> schreiben, naja. Dass es nicht möglich ist sich von Burgern zu ernähren sollte klar sein. Wobei ich mit meinem Kidneybohnen-Burger, bestehend aus Bohnen, Haferflocken und Petersilie, schon dicht dran bin. Neulich habe ich von einer Ernährung gehört die ausschließlich aus dem Verzehr von Fleisch besteht. Ich empfehle schonmal Ballaststoffe und Vitamin-C zu Supplementieren. Fleisch mit pflanzlichen Gewürzen zu veredeln wäre natürlich schummeln.</p>

<h3>Umwelt und Ethik</h3>

<p>Da hinter dem Incredible Burger Nestlé steht und Nestlé schon vor langer Zeit entschieden hat, dass Umwelt und Ethik keine Rolle spielen, lasse ich den Burger außen vor.</p>

<p>Also, der Beyond Burger kommt tiefgekühlt aus dem weit entfernten Amiland und hat keine vegane Zertifizierung. Fazit: Da gibt es Verbesserungsbedarf.</p>

<p>Der Mühlen Burger ist dagegen ein fast schon regionales Produkt und kommt mit einer recht kurzen Zutatenliste daher. Das Marketing der Rügenwalder Mühle ist erstaunlich. Geprägt von Diskussionsveranstaltungen bei denen ein Firmenchef den bad cop und der andere den good cop gibt. Aber man macht sich dort schon Gedanken zu Umweltfragen und hat auch erkannt, dass vegetarische Produkte auf vegan umgestellt werden müssen. Immer mit Rücksichtnahme auf den Kunden. Fazit: Schon eine positive Entwicklung und eine transparente Kommunikation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minicloud]]></title>
    <link href="https://manuel-io.github.io/blog/2019/06/01/minicloud/"/>
    <updated>2019-06-01T22:36:48+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/06/01/minicloud</id>
    <content type="html"><![CDATA[<img class="center 650" src="https://manuel-io.github.io/data/images/minicloud.gif" title="Minicloud" alt="Minicloud">

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortsetzung]]></title>
    <link href="https://manuel-io.github.io/blog/2019/05/05/fortsetzung/"/>
    <updated>2019-05-05T20:10:02+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/05/05/fortsetzung</id>
    <content type="html"><![CDATA[<p>Zuletzt habe ich die Addition von Dezimal- und Binärzahlen visuell
gegenüber gestellt und gezeigt, dass beide male das gleiche Schema zur
Anwendung kommt. Damit eine arithmetische Logikeinheit (<a href="https://de.wikipedia.org/wiki/Arithmetisch-logische_Einheit">ALU</a>, aka Computer) mit
dem binären Schema umgehen kann müssen sämtliche Rechenoperationen durch binäre
Operatoren ausgedrückt werden. In dem Fall <code>and</code>, <code>or</code> und <code>xor</code>. Diese
Operatoren können wiederum durch elektrische Schaltelemente umgesetzt werden.</p>

<p>Operatoren sind eine Abbildung von zwei binären Zahlen auf eine:</p>

<figure class='equation'>\begin{align}f: B\times B\to{B} = \{0, 1\},\\
\hbox{und }(d_1, d_2)\mapsto f(d_1, d_2),\nonumber\\
x, y_i, z_i, d_i\in B,\,\,i\in\mathbb{N}\nonumber\end{align}</figure>


<p>Das genaue Verhalten für einen Operator $f$ ist in <a href="https://de.wikipedia.org/wiki/Wahrheitstabelle">Logiktabellen</a> aufgelistet.
Wir benutzen:</p>

<figure class='equation'>\begin{align}\lfloor(y_i + x)/2\rfloor &\Leftrightarrow y_i \hbox{ and } x \\
y_i + x\,(\hbox{mod } 2) &\Leftrightarrow y_i \hbox{ xor } x\nonumber\\
(z_1 · z_2) + z_1 + z_2\,(\hbox{mod } 2) &\Leftrightarrow z_1 \hbox{ or } z_2\nonumber\end{align}</figure>


<p>Bei der Addition von zwei Zahlen wird zunächst immer geprüft, ob es einen
Übertrag in den nächst höheren Stellenwert gibt. Dieser Übertrag muss bei der
Berechnung der Stelle ggf. immer hinzuaddiert werden. Dadurch kommt es zur
Addition von drei Zahlen (vgl. <a href="https://manuel-io.github.io/blog/2019/04/14/base2/">hier</a>). Operatoren wirken aber nur
zwischen zwei Zahlen. Die Addition muss also gemäß Assoziativgesetz in zwei
Rechenoperationen aufgeteilt werden, aber auch dann kann bei der Addition von
zwei Zahlen ein Übertrag entstehen und dieser  Übertrag muss bei der nächsten
Addition von zwei Zahlen hinzuaddiert werden. So würde es immer weiter gehen.
Der Trick ist: Bei dem Rechenschritt $y_i + d_1 + d_2$ entsteht maximal eine
Zahl die immer noch kleiner ist als die doppelte Zahlenbasis (in dem Fall
kleiner 4):</p>

<figure class='equation'>\begin{equation}max(y_i + d_1 + d_2) = 3 \lt 4\end{equation}</figure>


<p>Es entsteht also maximal ein Übertrag. Bei der Addition von $d_1 + d_2$ oder
$y_i + (d_1 \hbox{ und } d_2)$. Die Lösung ist also herauszufinden ob dieser Übertrag ggf. bei
der ersten oder zweiten Addition entstanden ist. Und dafür wird der Operator
<code>or</code> gebraucht.</p>

<img class="center 800" src="https://manuel-io.github.io/data/images/base200.svg" title="Base 2" alt="Base 2">



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base ∈ {2, 10}]]></title>
    <link href="https://manuel-io.github.io/blog/2019/04/14/base2/"/>
    <updated>2019-04-14T15:59:39+02:00</updated>
    <id>https://manuel-io.github.io/blog/2019/04/14/base2</id>
    <content type="html"><![CDATA[<img class="center 800" src="https://manuel-io.github.io/data/images/base210.svg" title="Base 2 & 10" alt="Base 2 & 10">

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Animation 101]]></title>
    <link href="https://manuel-io.github.io/blog/2019/03/02/css-animation-101/"/>
    <updated>2019-03-02T22:03:34+01:00</updated>
    <id>https://manuel-io.github.io/blog/2019/03/02/css-animation-101</id>
    <content type="html"><![CDATA[<iframe src="https://manuel-io.github.io/data/dat/css-animation-101.html"
        style="width:100%;height:400px;"
        frameborder="0">
</iframe>


<p>This is an example of how to interact with a Website using pure CSS.
The picture is licensed under the <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">Creative Commons Attribution-Share
Alike 4.0</a> International license. You can find a copy <a href="https://commons.wikimedia.org/wiki/File:Sunset-spring-2019.jpg">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Driving Batteries in Parallel]]></title>
    <link href="https://manuel-io.github.io/blog/2019/02/03/driving-batteries-in-parallel/"/>
    <updated>2019-02-03T14:21:04+01:00</updated>
    <id>https://manuel-io.github.io/blog/2019/02/03/driving-batteries-in-parallel</id>
    <content type="html"><![CDATA[<img class="center" src="https://manuel-io.github.io/data/images/driving-parallel.jpg" title="Driving Parallel" alt="Driving Parallel">


<p><a href="http://www.falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+0.07470175003104325+50+5+43%0A370+304+64+384+64+1+0%0Ar+384+64+384+128+0+190%0A162+384+128+384+224+2+default-led+1+0+0+0.02%0Ag+384+256+384+288+0%0Ap+304+64+304+256+1+0%0Aw+304+256+384+256+0%0Aw+384+224+384+256+0%0Ap+464+128+464+256+1+0%0Aw+464+128+384+128+0%0Aw+464+256+384+256+0%0Aw+256+64+304+64+0%0Aw+256+128+256+64+0%0A370+160+128+256+128+1+0%0Ap+80+160+160+160+1+0%0Ad+80+128+160+128+2+1N4004%0Aw+160+160+160+128+0%0Aw+80+160+80+128+0%0AR+80+128+16+128+0+0+40+6.1+0+0+0.5%0AR+80+192+16+192+0+0+40+6.2+0+0+0.5%0Ad+80+192+160+192+2+1N4004%0A370+160+192+256+192+1+0%0Ap+80+224+160+224+1+0%0Aw+80+224+80+192+0%0Aw+160+224+160+192+0%0Aw+256+192+256+128+0%0AR+80+256+16+256+0+0+40+6.3+0+0+0.5%0Ad+80+256+160+256+2+1N4004%0A370+160+256+256+256+1+0%0Ap+80+288+160+288+1+0%0Aw+80+288+80+256+0%0Aw+160+288+160+256+0%0Aw+256+256+256+192+0%0Ap+80+96+160+96+1+0%0Ad+80+64+160+64+2+1N4004%0A370+160+64+256+64+1+0%0AR+80+64+16+64+0+0+40+6+0+0+0.5%0Aw+80+96+80+64+0%0Aw+160+96+160+64+0%0Ap+80+32+160+32+1+0%0Ad+80+0+160+0+2+1N4004%0AR+80+0+16+0+0+0+40+5.6+0+0+0.5%0A370+160+0+256+0+1+0%0Aw+80+32+80+0+0%0Aw+160+32+160+16+0%0Aw+160+16+160+0+0%0Aw+256+0+256+64+0%0Ap+80+-32+160+-32+1+0%0Ad+80+-64+160+-64+2+1N4004%0AR+80+-64+16+-64+0+0+40+5.3+0+0+0.5%0A370+160+-64+256+-64+1+0%0Aw+80+-32+80+-64+0%0Aw+160+-32+160+-64+0%0Aw+256+-64+256+0+0%0A">Simulated Circuit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vegane Rezepte 2018]]></title>
    <link href="https://manuel-io.github.io/blog/2018/12/31/vegane-rezepte-2018/"/>
    <updated>2018-12-31T22:54:44+01:00</updated>
    <id>https://manuel-io.github.io/blog/2018/12/31/vegane-rezepte-2018</id>
    <content type="html"><![CDATA[<img class="center" src="https://manuel-io.github.io/data/images/recipes.jpg" title="Recipes" alt="Recipes">


<p>Ich habe angefangen möglichst viele Rezepte zu Dokumentieren und
in meiner <a href="https://vkitchen.herokuapp.com/">Rezepte-Datenbank</a> zu speichern. Ist 2018 schon recht
voll geworden ;-).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zyklische Redundanzprüfung (Theorie)]]></title>
    <link href="https://manuel-io.github.io/blog/2018/12/24/zyklische-redundanzprufung/"/>
    <updated>2018-12-24T01:12:36+01:00</updated>
    <id>https://manuel-io.github.io/blog/2018/12/24/zyklische-redundanzprufung</id>
    <content type="html"><![CDATA[<p>Hier geht es um Vektorrechnung. Dazu habe ich ja schon hier und da
etwas gehabt: Komplexe Zahlen, Polynome, Vektorintegral. Jetzt geht es
um Bitvektoren. Also nehmen wir hier als Beispiel eine Zahlenfolge aus
4 Bit 1101. Mit 4 Bit können $ 2^{4} $ Zahlen/Zustände abgebildet
werden (hier 16 Zahlen).</p>

<p>Diese Zahlenfolge $ v_i $ mit $ v_i \in {0,1} $ wird jetzt als Vektor in
dezimalen Zahlen abgebildet. Also als Polynom $ f $ mit Definition von Addition
und Multiplikation.  Die Summe der Koeffizienten entspricht dem Wert der
Bitfolge. Hier: $ 13 $.</p>

<figure class='equation'>\begin{equation}f(x) = \sum_{i = 0}^{i-1} v_i\cdot 2^i\cdot x^i = 8x^3 + 4x^2 + 1\end{equation}</figure>


<p>$ f $ sind die Daten, die zwischen Sender und Empfänger ausgetauscht
werden sollen.</p>

<p>Das Generatorpolynom $ g $ ist konstant und wird vom Sender verwendet um die
Prüfsumme von den Daten abzuleiten. Der Empfänger benutzt das
Polynom zu Fehlererkennung der empfangenen Daten.</p>

<figure class='equation'>\begin{equation}g(x) = x^3 + x^2 + x\quad\hbox{mit}\quad grad(g) \leq grad(f)\end{equation}</figure>


<p>Mit einem Trägerpolynom $ t(x) $ sollen Daten und Prüfsumme in einem
Paket übertragen werden. Dazu werden Daten, die mit $ f $ abgebildet
werden, durch Multiplikation mit $ x^{n} $ im oberen Bereich plaziert,
im unteren Bereich ist Platz für die Prüfsumme der Daten, die durch
addition angehängt wird. Die Prüfsumme hat maximal die Größe des
Generatorpolynoms wodurch der Wert von $ n= grad(g) $ bestimmt ist.</p>

<figure class='equation'>\begin{equation}f^*(x) = (t\circ f)(x) = f(x)\cdot x^{n} = (8x^3 + 4x^2 + 1)\cdot x^3 = 8x^6 + 4x^5 + x^3\end{equation}</figure>


<p>Wie die Prüfsumme gebildet wird und anschließend mit den Daten transportiert
wird soll hier theoretisch disskutiert werden: Die Annahme ist, dass das
Polynom $ f^* $ in einen ganzrationalen Anteil und einen echt
gebrochenrationalen Anteil zerlegt werden kann:</p>

<figure class='equation'>\begin{equation}\label{eq:div}
  f^*(x) = q(x)\cdot g(x) + r(x)\quad\Leftrightarrow\quad\frac{f^*(x)}{g(x)} = q(x) + \frac{r(x)}{g(x)}\end{equation}</figure>


<p>Es gilt dann zunächst $ grad(r) &lt; grad(f) $. Durch iterierte Anwendung von
\eqref{eq:div} kann der Rest immer wieder Zerlegt werden bis $ grad(r) &lt; grad(g) $ gilt.
Bekannt ist das Verfahren unter dem Namen: Polynomdivision.</p>

<figure class='equation'>\begin{equation}q(x)\cdot g(x) + r(x) = q(x)\cdot g(x) + (q_1(x)\cdot g(x) + r_1(x)) = ...\end{equation}</figure>


<p>Der verbleibende Anteil $ r(x) $ mit $ grad(r) &lt; grad(g) = n $ bildet die
Prüfsumme. Der Träger $ t $ aus $ f^* $ und $ r $  wird durch
Umformung aufgelöst:</p>

<figure class='equation'>\begin{equation}t(x) = f^*(x) - r(x) = f(x)\cdot x^n - r(x) = q(x)\cdot g(x)\end{equation}</figure>


<p>Polynomdivision: Die Daten $ f^* $ werden durch das Generatorpolynom sukzessive
geteilt. Das verbleibende Restpolynom bildet die Prüfsumme ab:</p>

<figure class='equation'>\begin{align}& 8x^6 + 4x^5 + x^3 : x^3 + x^2 + x= 8x^3 - 4x^2 + 9 \\
& -(8x^6 + 8x^5 + 8x^4) \nonumber\\
\hline
& - 4x^5 - 8x^4 + x^3 \nonumber\\
& -(- 4x^5 - 4x^4 - 4x^3) \nonumber\\
\hline
& -4x^4 + 5x^3 \nonumber\\
& -(- 4x^4 - 4x^3 - 4x^2) \nonumber\\
\hline
& 9x^3 + 4x^2 \nonumber\\ 
& -(9x^3 + 9x^2 + 9x) \nonumber\\
\hline
& - 5x^2 - 9x \nonumber\\\end{align}</figure>


<p>Das Polynom aus Daten und Prüfsumme $ f^*(x) - r(x) $ hat entsprechend
folgendes aussehen:</p>

<figure class='equation'>\begin{equation}t(x) = f(x)\cdot x^n - r(x) = 8x^6 + 4x^5 + x^3 + 5x^2 + 9x\end{equation}</figure>


<p>Polynomdivision: Die Daten $ t $ werden übertragen. Das
Polynom vom Empfänger erneut durch das Generatorpolynom $ g $ geteilt. Es
sollte sich dann kein Rest mehr ergeben und die Übertragung war
erfolgreich.</p>

<figure class='equation'>\begin{align}& 8x^6 + 4x^5 +x^3 + 5x^2 + 9x : x^3 + x^2 + x = 8x^3 - 4x^2 - 4x + 9 \\
& -(8x^6 + 8x^5 + 8x^4) \nonumber\\
\hline
& - 4x^5 - 8x^4 + x^3 + 5x^2 + 9x \nonumber\\
& -(- 4x^5 - 4x^4 - 4x^3) \nonumber\\
\hline
& - 4x^4 + 5x^3 + 5x^2 + 9x \nonumber\\
& -(- 4x^4 - 4x^3 - 4x^2) \nonumber\\
\hline
& 9x^3 + 9x^2 + 9x \nonumber\\
& -(9x3 + 9x^2 + 9x) \nonumber\\
\hline
& 0 \nonumber\\\end{align}</figure>


<p>Um die eigentlichen Daten $ f $ aus dem Träger zu extrahieren, muss dieses durch
das Polynom $ x^{n} $ mit $ n = grad(g) $ sukzessive geteilt werden:</p>

<figure class='equation'>\begin{equation}8x^6 + 4x^5 +x^3 + 5x^2 + 9x : x^3 = 8x^3 + 4x^2 + 1 + Rest\end{equation}</figure>


<p>Der Rest ist in dem Fall uninteressant. Nur der ganzrationale Anteil spiegelt
die Daten wieder.</p>

<p>Wie das Verfahren in der Praxis konkret aussieht, dann im Polynomring $ \mathbb{Z_2]}[x] $,
wird hier nicht Thematisiert. Es vereinfacht sich aber einiges mit binären
Operatoren. Es sei $ a,b,c\in\mathbb{Z_2}$ und $ x,y,z\in\mathbb{Z} $:</p>

<figure class='equation'>\begin{align}& a\hbox{ xor }b = c\quad\Leftrightarrow\qquad x + y \equiv z \mod 2\\
& a\hbox{ and }b = c\quad\Leftrightarrow\qquad x\cdot y \equiv z\mod 2 \nonumber\\\end{align}</figure>


<p>Und macht das Verfahren dadurch praktikabel. Ein <a href="https://resources.mpi-inf.mpg.de/departments/d1/teaching/ss10/MFI2/kap31.pdf">PDF</a> vom MPI-INF hat
eine Erklärung. Einen guten Einstieg bietet auch die <a href="https://de.wikipedia.org/wiki/Zyklische_Redundanzpr%C3%BCfung">Wikipedia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just my two cent]]></title>
    <link href="https://manuel-io.github.io/blog/2018/12/09/just-my-two-cent/"/>
    <updated>2018-12-09T12:58:29+01:00</updated>
    <id>https://manuel-io.github.io/blog/2018/12/09/just-my-two-cent</id>
    <content type="html"><![CDATA[<img class="center" src="https://manuel-io.github.io/data/images/twocent.png" title="Just my two cent" alt="Just my two cent">


<p>Recently, I saw an example of how to solve <a href="https://twitter.com/hukl/status/1065670048407306243">a problem in different
programming languages</a>.
The title was: &ldquo;In Erlang, the Ruby code example would look like
this&rdquo;. Actually, I don&rsquo;t know how the ruby code example looks like to solve the
same problem, however from the point of what it does I can guess:</p>

<pre><code>[-&gt; a {a+10}, -&gt; a {a*10}, -&gt; a {a-5}].reduce(23) {|a, b| b.call a}
</code></pre>

<p>Right? No, Ruby is a fundamental object oriented programming language
and the example would probably look different. But also, Ruby has
some functional features. Like others:</p>

<pre><code>Phython:    reduce(lambda x, y: y(x), [lambda a: a+10, lambda a: a*10, lambda a: a-5], 23)
Javascript: [a =&gt; a+10, a =&gt; a*10, a =&gt; a-5].reduce((a, i) =&gt; i(a), 23)
Haskell:    foldl (\x y -&gt; y(x)) 23 [(+10), (*10), (+(-5))]
Racket:     (foldl (λ (b a) (b a)) 23 (list (λ (a) (+ a 10)) (λ (a) (* a 10)) (λ (a) (- a 5))))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List operations]]></title>
    <link href="https://manuel-io.github.io/blog/2018/10/27/list-operations/"/>
    <updated>2018-10-27T15:41:08+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/10/27/list-operations</id>
    <content type="html"><![CDATA[<p>Apply a function to each member of a list:</p>

<pre><code>Ruby:       [1,2,3].map { |x| x * 2 }
Python:     map(lambda x: x * 2, [1,2,3])
Haskell:    map (*2) [1,2,3]
Javascript: [1,2,3,4].map(x =&gt; x * 2)
Racket:     (map (λ (x) (* x 2)) (list 1 2 3))
</code></pre>

<p>Flatten a list of multiple sublists:</p>

<pre><code>Ruby;       [[1,2,3],[4,5,6],[7,8,9]].flatten
Python:     [item for list in [[1,2,3],[4,5,6],[7,8,9]] for item in list]
Haskell:    concat [[1,2,3],[4,5,6],[7,8,9]]
Javascript: [].concat(...[[1,2,3],[4,5,6],[7,8,9]])
</code></pre>

<p>Multiply all members of a list:</p>

<pre><code>Ruby:       [1,2,3,4].reduce(1,:*)
Python:     reduce((lambda x, y: x * y), [1,2,3,4], 1)
Haskell:    foldl (*) 1 [1,2,3,4]
Javascript: [1,2,3,4].reduce((accu, item) =&gt; accu * item, 1)
Racket:     (foldl * 1 (list 1 2 3 4))
</code></pre>

<p>Filter all even members from a list:</p>

<pre><code>Ruby:       [0,1,2,3,4,5,6,7,8,9].select &amp;:even?
Python:     filter(lambda x: not x % 2, [0,1,2,3,4,5,6,7,8,9])
Haskell:    filter (even) [0,1,2,3,4,5,6,7,8,9]
Javascript: [0,1,2,3,4,5,6,7,8,9].filter(x =&gt; x % 2 == 0)
Racket:     (filter even? (list 0 1 2 3 4 5 6 7 8 9))
</code></pre>

<p>Sort a list ascending:</p>

<pre><code>Ruby:       [5,9,0,1,3,2,4,8,6,7].sort
Python:     sorted([5,9,0,1,3,2,4,8,6,7])
Haskell:    Data.List.sort [5,9,0,1,3,2,4,8,6,7]
Javascript: [5,9,0,1,3,2,4,8,6,7].sort()
Racket:     (sort (list 5 9 0 1 3 2 4 8 6 7) &lt;)
</code></pre>

<p>Element is member of the list:</p>

<pre><code>Ruby:       [0,1,2,3,4,5,6,7,8,9].include? 5
Python:     5 in [0,1,2,3,4,5,6,7,8,9]
Haskell:    5 `elem` [0,1,2,3,4,5,6,7,8,9]
Javascript: [0,1,2,3,4,5,6,7,8,9].includes(5)
Racket:     (if [member 5 (list 0 1 2 3 4 5 6 7 8 9)] #t #f)
</code></pre>

<p>List of numbers between 100 and 200:</p>

<pre><code>Ruby:       (100..200).to_a
Python:     range(100,200 + 1)
Haskell:    [100..200]
Javascript: Array(100 + 1).fill(100).map((e,i) =&gt; e + i)
</code></pre>

<p>Two lists and return a list of corresponding pairs:</p>

<pre><code>Ruby:       [1,2,3,4,5].zip([5,4,3,2,1])
Python:     zip([1,2,3,4,5], [5,4,3,2,1])
Haskell:    zip [1,2,3,4,5] [5,4,3,2,1]
</code></pre>

<p>Minimum and Maximum of a list:</p>

<pre><code>Ruby:       [:min, :max].map { |m| [5,2,6,2,1,7,3].method(m).call }
Python:     [m([5,2,6,2,1,7,3]) for m in [min, max]]
Haskell:    [m [5,2,6,2,1,7,3] | m &lt;- [minimum, maximum]]
Javascript: [Math.min, Math.max].map(m =&gt; m.apply(null, [5,2,6,2,1,7,3]))
Racket:     (map (λ (f) (apply f (list 5 2 6 2 1 7 3))) (list min max))
</code></pre>

<p>Print each member of a list:</p>

<pre><code>Ruby:       [1,2,3,4,5].each { |v| puts v }
Python:     print '\n'.join(str(p) for p in [1,2,3,4,5])
Haskell:    mapM_ (putStrLn . show) [1,2,3,4,5]
Javascript: [1,2,3,4,5].forEach(x =&gt; console.log(x))
Racket:     (map (λ (x) (println (number-&gt;string x))) (list 1 2 3 4 5))
</code></pre>

<p>Multiple lines to one single line string:</p>

<pre><code>Ruby:       "Hello\nprograming\n world".lines.map(&amp;:strip).join ' '
Python:     ' '.join([line.strip() for line in "Hello\nprograming\n world".splitlines()])
Haskell:    Data.Text.unpack $ Data.Text.unwords $ map(Data.Text.strip) $ Data.Text.lines $ Data.Text.pack "Hello\nprograming\n world"
Javascript: "Hello\nprograming\n world".split('\n').map(x =&gt; x.replace(' ', '')).join(' ')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dürüm (vegan)]]></title>
    <link href="https://manuel-io.github.io/blog/2018/10/23/durum-vegan/"/>
    <updated>2018-10-23T17:54:23+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/10/23/durum-vegan</id>
    <content type="html"><![CDATA[<iframe style='width:100%;height:500px;'
src='https://vkitchen.herokuapp.com/recipes/151/embedded?locale=de&published=false'
frameborder='0'> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transferzeit]]></title>
    <link href="https://manuel-io.github.io/blog/2018/10/06/transferzeit/"/>
    <updated>2018-10-06T23:49:33+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/10/06/transferzeit</id>
    <content type="html"><![CDATA[<img class="left" src="https://manuel-io.github.io/data/images/hohmann.png" width="300" title="Hohmann-Transfer" alt="Hohmann-Transfer">


<p>Dieser Eintrag beschreibt die Zeit auf einem <a href="https://de.wikipedia.org/wiki/Hohmann-Transfer">Hohmann-Transfer</a>
zwischen zwei Kreisbahnen um einen Zentralkörper und ist im Weiteren
auch für einen <a href="https://de.wikipedia.org/wiki/Benutzer:Manuel_Bieling/Bi-elliptischer_Transfer">Bi-elliptischen-Transfer</a> interessant. Die Bahn
für den Transfer ist dabei immer eine Ellipse mit der großen Halbachse
$a = \frac{r_1 + r_2}{2}$ Dabei ist $r_1$ Radius der inneren
Kreisbahn und $r_2$ Radius der äußeren Bahn.</p>

<p>Die Frage nach der Transferzeit $T$ auf einer Ellipse kann durch das
3. Keplersche Gesetz beantwortet werden. Nachdem gilt: Die Periode der
quadratischen Umlaufzeit auf einer Ellipsenbahn ist proportional zu
der dritten Potenz der Halbachse $a$:</p>

<figure class='equation'>\begin{equation}\label{eq:test}
T^2\sim a^3\quad\Leftrightarrow\quad T^2 = c\cdot a^3,\quad c\in\mathbb{R}\end{equation}</figure>


<p>Da die Halbachse bereits bestimmt wurde, muss hier noch der
Proportionalitätsfaktor $c$ bestimmt werden.</p>

<p>Dieser wird hier durch eine möglichst einfache Ellipse bestimmt. Die
Ausgangskreisbahn umkreist den gleichen Zentralkörper mit der Masse $M$
wie auch die Transfer-Ellipse somit ergibt sich die gleiche Konstante.
Für die gilt:</p>

<figure class='equation'>\begin{equation}\label{eq:kreisbahn}
T^2\sim r^3\quad\Leftrightarrow\quad T^2 = c\cdot r^3,\quad c\in\mathbb{R}\end{equation}</figure>


<p>Damit sich ein Körper auf einer Kreisbahn befindet müssen sich
Zentripetalkraft und Gravitationskraft ausgleichen. Da die Vektoren
stets in entgegengesetzte Richtung zeigen, sind hier nur die Beträge
wichtig:</p>

<figure class='equation'>\begin{equation}F_z = F_g\quad\Leftrightarrow\quad m\frac{v^2}{r} = \gamma\frac{M\cdot m}{r^2},\quad\gamma\in\mathbb{R}\end{equation}</figure>


<p>$\gamma$ ist die Gravitationskonstante. Damit ergibt sich die
Kreisbahngeschwindigkeit:</p>

<figure class='equation'>\begin{equation}\Rightarrow\quad v = \sqrt{\frac{\gamma\cdot M}{r}}\end{equation}</figure>


<p>Mit dem Kreisumfang $2\cdot r\cdot\pi$ für die gesamte Strecke einer
Periode ergibt sich dann die Zeit $T$ nach $v = \frac{2\cdot
r\cdot\pi}{T}$ mit dem gewöhnlichen Weg-Zeit-Gesetz. Die Konstante $c$
kann resultierend in $\eqref{eq:kreisbahn}$ aufgelöst werden:</p>

<figure class='equation'>\begin{equation}T^2 = \frac{4\cdot\pi^2\cdot r^3}{\gamma\cdot M}\quad\Rightarrow\qquad c = \frac{4\cdot\pi^2}{\gamma\cdot M}\end{equation}</figure>


<p>Damit ist für die ursprüngliche Transfer-Ellipse $\eqref{eq:test}$,
mit der großen Halbachse $a = \frac{r_2 + r_1}{2}$ und dem Wert für
$c$, die Periode gegeben:</p>

<figure class='equation'>\begin{equation}T^2 = c\cdot a^3\quad\Leftrightarrow\quad T^2 = \frac{4\cdot\pi^2}{\gamma\cdot M}\cdot \frac{(r_2 + r_1)^3}{8}\end{equation}</figure>


<p>Da die Transfer-Ellipse nur aus einer halben Ellipse besteht, wird hier
auch nur die Hälfte der Periode genommen:</p>

<figure class='equation'>\begin{equation}T = \pi\sqrt{\frac{(r_2 + r_1)^3}{2\cdot\gamma\cdot M}} ,\quad T_{1/2} = \pi\sqrt{\frac{(r_2 + r_1)^3}{8\cdot\gamma\cdot M}}\end{equation}</figure>


<p>Damit ist die Transferzeit $ T_{&frac12;} $ gegeben.</p>

<p>Hintergrund ist, dass diese Transferzeit auch für den
<a href="https://de.wikipedia.org/wiki/Benutzer:Manuel_Bieling/Bi-elliptischer_Transfer">Bi-elliptischen</a> Transfer erweitert werden kann und dass die
ESA in einem Video „<a href="https://www.youtube-nocookie.com/embed/M2_NeFbFcSw">Soyuz rendezvous and docking explained</a>“ den Flug
zur ISS mit jenem Manöver beschreibt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vegane Pizza Woche]]></title>
    <link href="https://manuel-io.github.io/blog/2018/08/12/vegane-pizza-woche/"/>
    <updated>2018-08-12T11:15:26+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/08/12/vegane-pizza-woche</id>
    <content type="html"><![CDATA[<p>Die vegane Kitchen ist gerade das einzige Project für das ich Zeit
finde. Na klar für Kochen muss doch immer Zeit bleiben und als
Veganer hat man in meiner Wohngegend auch gar keine andere Chance.</p>

<p>Ich kann Fortschritte bezüglich meiner Rezepte-Datenbank
berichten. Es ist jetzt möglich ein Rezept auch mit Verbindungen zu anderen
Rezepten zu veröffentlichen und auf einer Seite anzuzeigen.
Problematisch wird es wenn ein Rezept mit einem Rezept verbunden ist,
dass wiederum mit einem Rezept verbunden ist. Diese Kette kann man
beliebig weiter spinnen. Die Software erlaubt das Prinzip.</p>

<p>Gute Beispiele, die jetzt gelöst sind, sind die Pizza Rezepte.
<a href="https://vkitchen.herokuapp.com/recipes/140/embedded?locale=de">Pizza Funghi</a>, <a href="https://vkitchen.herokuapp.com/recipes/143/embedded?locale=de">Pizza Hawaii</a> und <a href="https://vkitchen.herokuapp.com/recipes/57/embedded?locale=de">Lahmacun</a>. Zwei Pizzen haben
z.B. den gleichen Teig und die gleiche Sauce. Da bietet es sich einfach an
ein Rezept für den Pizzateig und eines für die Pizzasauce
anzulegen um dann die Pizzen mit Teig und Sauce zu verbinden.</p>

<iframe style='width:100%;height:500px;'
src='https://vkitchen.herokuapp.com/recipes/143/embedded?locale=de&published=false'
frameborder='0'> </iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VegMe!]]></title>
    <link href="https://manuel-io.github.io/blog/2018/06/30/vegme/"/>
    <updated>2018-06-30T13:46:31+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/06/30/vegme</id>
    <content type="html"><![CDATA[<p>Ich habe im Netz eine Firma gefunden die das Internet nach Rezepten
etc. absucht und irgendwie Informationen zusammenstellt: „Our goal is
to capture the world&rsquo;s food knowledge“ (<a href="https://www.edamam.com/">https://www.edamam.com/</a>). Die
haben eine Schnittstelle (API) die Entwickler auch mal einfach so
benutzen können. Zwei Entwicklerinnen haben daraus mal eine
Seite gebastelt mit der nach veganen Rezepten gesucht werden kann:</p>

<p><a href="https://vegme.herokuapp.com/">VegMe!</a>. Keine Ahnung ob das was ist. Schöne
Bilder für ideenlose Tage sind aber dabei: <a href="https://vegme.herokuapp.com/queries?health=vegan&amp;max_cal=500&amp;q=sushi&amp;search_id=8003b097-142b-40e8-83b8-f0debcd106ba">Beispiel</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kurze Notiz]]></title>
    <link href="https://manuel-io.github.io/blog/2018/06/22/kurze-notiz/"/>
    <updated>2018-06-22T11:33:05+02:00</updated>
    <id>https://manuel-io.github.io/blog/2018/06/22/kurze-notiz</id>
    <content type="html"><![CDATA[<blockquote><p>… und merke dir: Du bis nur am Leben um in einer Tierfabrik gemästet
zu werden um anschließend auf einem Teller zu landen. Wenn du auf dem
Weg zur Tierfabrik deine Nase durch die Gitterstäbe des Transportes
steckst und die Aussicht mit frischer Luft und Sonne genießen
kannst, dann freue dich, denn in der Tierfabrik gibt es weder
frische Luft noch Sonne und Regen. Wir Menschen würden an den
Bedingungen kaputt gehen, aber mache dir keine sorgen, wir versorgen
dich gut mit Medikamenten denn kranke Tiere sind nur schwer
verdaulich. Und noch etwas: Es wäre schön, wenn du zum Wohle der
Umwelt nicht so viel Ausdünsten würdest.</p></blockquote>

<p>So würde ich mein Erlebnis heute Morgen auf dem Weg zum Einkauf
zusammenfassen. Ich lasse das einfach mal so stehen.</p>
]]></content>
  </entry>
  
</feed>
